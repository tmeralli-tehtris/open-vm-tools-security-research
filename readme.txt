


				================================================

						Open vmware tools 

				================================================





I/Introduction


open-vm-tools is a service with a set of plugins, runnable in user space, that enable several features in VMware products such as seemless interactions with guests. It includes, but does not install the original kernel modules for enhancing the performance of virtual machines running Linux.
This version of the tools has been developped from official sources : http://open-vm-tools.sourceforge.net/

open-vm-tools enables the following features in VMware products:

    - Execution of user configured scripts in guests at different state change operation.
    - The ability to communicate programs, commands and file system operation in guests to enhance guest automation with vix.
    - Periodic collection of network, disk, and memory usage information from the guest.
    - Generation of heartbeat from guests to hosts so VMware's HA solution can determine guests' availability.
    - Clock synchronization between guests and hosts or client desktops.
    - Quiescing guest file systems to allow hosts to capture file-system-consistent guest snapshots.
    - Execution of pre-freeze and post-thaw scripts while quiescing guest files systems.
    - Possibility of running the programm in a chroot environment.
    - Easy customization of the information sent to Vsphere client by modifying the .conf files in etc/vmware-tools


This version of vmw does not need a server X to work.
It has been tested on a 64bit Ubuntu 14.04 linux version distribution, however it may work on other systems.




II/Features


Open-vm-tools does not include all the features developped in the official package but kept a minimal, secured, monitored service with functionnal plugins.
The main service vmtoolsd includes plugins loading and rpcChannel configuration. This Rpc channel will be the communication tunnel from the guest to the host.

Each plugin has a different purpose :

	- guestInfo uses vmstats and libdumbnet to collect information about the guest, it creates a local database and sends the collected data to the host with a RpcChannel. the IP addresses collected are then displayed on Vsphere menu.
	- An additionnal feature that comes with the patch is the possibility of choosing the displayed IPs on the client interface, to add an IP, simply write it in the appropriate configuration file /etc/vmware-tools/intf.conf. Different IP adresses must be separated by a line break.
	- powerOps is a state change assitant plugin. Whenever the host performs a vmtoolsd supported state changing action on the targeted guest, the guest can perform different actions.
	- vmBackups communicates with the host to perform advanced snapshots by quiescing the file system of the guest and restoring it at the end. The patched feature includes capturing the event and logging it.

To build the project documentation, go to the docs directory and run make.



III/General Architecture


Using the first way of deploying vmtoolsd, all the following path will have the extracted folder as the / reference.
The obtained folder using the given method is similar to a Linux file system, it contains the following folders :

	- /bin provides the binaries.
	- /dev and /proc contain system files useful for vmtoolsd, users should not need to modify anything in this folder.
	- /etc is the configuration folder, you can modify tools.conf for vmtoolsd logging options or state change scripts.
	- /include /lib /lib64 and /usr have the librairies used by vmtoolsd such as libvmtools, libguest and librpc.
	- /share provides error messages templates.
	- /var will be the target directory for logs and alerts. 

A user should only need to modify configuration files in /etc in case the default configuration does not suit him, or read logs and alerts from /var. 

in /etc :
	- locatltime is UTC+00 by default, modify it if you want different time location for your logs. Passwd and pam.d content are generic files. In vmware-tools you can find the scripts called by powerops during state change, feel free to add any command but add the corresponding binaries or librairies to the chroot directory in case you use start.sh. You can also change tools.conf. In case you want the local user to be officially running vmtoolsd, you can add it to the chrooted environment passwd by doing 
grep <user_for_vmw> /etc/passwd>> etc/passwd


in /var vmw.pid contains the pid of the last running vmtoolsd, modifying it would result in an unexpected behavior of the vmtoolsd communication with the host. All the logs generated by vmtoolsd will be in vmware_logs. You can either delete them or modify them.
from /var/log : statechange.log is created and populated on the vm state change, if the state modifictaion is soft enough to let vmtools log it, however the resume/poweron of the vm will always be detected. Also snapshot.log will let you know about any file-system-consistent snapshot donewith file system quiescing. the other log files
are generated by the basic vmtoolsd demon with the highest level of logging possible.



/etc/vmware-tools contains everything a user would want to modify, state change scripts, logging conf file and 3 other configurations files :
	- fqdn.conf, write the DNS name you want to send to the VSphere client in this file
	- intf.conf, put every ip addresses to send to the VSphere client, one per line.
	- version, will provide the version of vmtools to the ESXI server, first line is the major number, second is minor, last line is the base. Modify it if you want to achieve a different result in the VSphere client vmtools activation panel.




IV/Deploy


There is two ways of deploying the patched version of open-vm-tools :
- with dpkg : the version supports building into a debian package using the following steps.


    #!/bin/bash
    curr_dir=$(pwd)
    mkdir tmp
    cd tmp
    #get sources and dependencies
    sudo apt-get install dpkg-dev fakeroot && apt-get source open-vm-tools && sudo apt-get build-dep open-vm-tools
    #get patch and patch the corresponding source code
    patch -r - --forward -p0 < vmtools_monitored.patch
    #build and deploy the custom package
    cd open-vm-tools-9.4.0-1280544 && dpkg-buildpackage -rfakeroot -b && cd .. && mkdir vmw &&  dpkg -x open-vm-tools_9.4.0-1280544-5ubuntu6.2_amd64.deb vmw
    #run the postinst script
    chmod +x postinst.sh
    ./postinst.sh
    mv vmw ..
    cd ..
    rm -rf tmp
    tar zcvf vmw.tar.gz vmw
    rm -rf vmw

The postinst.sh has to be run only once before creating the .tar.gz file after that the user can extract and directly run vmtoolsd.

- with configure and Make :
	go into the patched directory
	run ./configure --prefix=<installation directory> --without-x --without-kernel-modules CFLAGS=-Wno-deprecated-declarations && make && ldconfig
        sudo make install


By using Make you will install vmtools with / as a root folder, therefore chrooted execution will not be possible.
For additional compilation options type ./configure --help

To start vmtoolsd, go to the target folder, /bin and then launch start.sh, to stop vmtoolsd use stop.sh, notice that vmtoolsd can only be started once, the script does verify if an instance
is already started or not.
In case make was used to install vmtoolsd, it should be in the current execution path, therefore calling vmtoolsd from anywhere will work.


here are the current depedencies, however apt-get build-dep would already install them :
dpkg-dev libdumbnet-dev libprops3-dev libglib-dev libdnet-dev libicu-dev 

